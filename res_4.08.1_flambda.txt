Throughputs for "gen", "gen_no_optim", "g", "g_exn", "core.sequence", "base.sequence", "cps", "cps2", "fold", "iter", "list", "lazy_list", "ulist", "uncons", "coroutine", "batseq", "std_seq", "oseq" each running 2 times for at least 3 CPU seconds:

          gen:  3.55 WALL ( 3.55 usr +  0.00 sys =  3.55 CPU) @ 47.04/s (n=167)
                3.55 WALL ( 3.55 usr +  0.00 sys =  3.55 CPU) @ 47.01/s (n=167)
 gen_no_optim:  3.14 WALL ( 3.14 usr +  0.00 sys =  3.14 CPU) @ 42.03/s (n=132)
                3.14 WALL ( 3.14 usr +  0.00 sys =  3.14 CPU) @ 42.00/s (n=132)
            g:  3.18 WALL ( 3.18 usr +  0.00 sys =  3.18 CPU) @ 93.71/s (n=298)
                3.21 WALL ( 3.21 usr +  0.00 sys =  3.21 CPU) @ 92.79/s (n=298)
        g_exn:  3.17 WALL ( 3.17 usr +  0.00 sys =  3.17 CPU) @ 45.39/s (n=144)
                3.18 WALL ( 3.17 usr +  0.00 sys =  3.17 CPU) @ 45.36/s (n=144)
core.sequence:  3.16 WALL ( 3.16 usr +  0.00 sys =  3.16 CPU) @ 62.60/s (n=198)
                3.16 WALL ( 3.16 usr +  0.00 sys =  3.16 CPU) @ 62.70/s (n=198)
base.sequence:  3.18 WALL ( 3.18 usr +  0.00 sys =  3.18 CPU) @ 60.93/s (n=194)
                3.19 WALL ( 3.19 usr +  0.00 sys =  3.19 CPU) @ 60.74/s (n=194)
          cps:  3.55 WALL ( 3.55 usr +  0.00 sys =  3.55 CPU) @ 20.59/s (n=73)
                3.55 WALL ( 3.55 usr +  0.00 sys =  3.55 CPU) @ 20.59/s (n=73)
         cps2:  3.61 WALL ( 3.61 usr +  0.00 sys =  3.61 CPU) @ 20.51/s (n=74)
                3.62 WALL ( 3.62 usr +  0.00 sys =  3.62 CPU) @ 20.42/s (n=74)
         fold:  3.09 WALL ( 3.09 usr +  0.00 sys =  3.09 CPU) @ 163.14/s (n=504)
                3.06 WALL ( 3.06 usr +  0.00 sys =  3.06 CPU) @ 164.81/s (n=504)
         iter:  3.18 WALL ( 3.18 usr +  0.00 sys =  3.18 CPU) @ 307.68/s (n=978)
                3.17 WALL ( 3.17 usr +  0.00 sys =  3.17 CPU) @ 308.30/s (n=978)
         list:  3.08 WALL ( 3.07 usr +  0.01 sys =  3.08 CPU) @  5.52/s (n=17)
                3.05 WALL ( 3.05 usr +  0.00 sys =  3.05 CPU) @  5.57/s (n=17)
    lazy_list:  3.02 WALL ( 3.02 usr +  0.00 sys =  3.02 CPU) @  6.95/s (n=21)
                3.02 WALL ( 3.02 usr +  0.00 sys =  3.02 CPU) @  6.96/s (n=21)
        ulist:  3.16 WALL ( 3.16 usr +  0.00 sys =  3.16 CPU) @ 58.80/s (n=186)
                3.17 WALL ( 3.17 usr +  0.00 sys =  3.17 CPU) @ 58.61/s (n=186)
       uncons:  3.18 WALL ( 3.18 usr +  0.00 sys =  3.18 CPU) @ 60.46/s (n=192)
                3.20 WALL ( 3.19 usr +  0.01 sys =  3.20 CPU) @ 59.93/s (n=192)
    coroutine:  3.11 WALL ( 3.10 usr +  0.01 sys =  3.11 CPU) @ 53.09/s (n=165)
                3.09 WALL ( 3.09 usr +  0.00 sys =  3.09 CPU) @ 53.42/s (n=165)
       batseq:  3.18 WALL ( 3.18 usr +  0.00 sys =  3.18 CPU) @ 44.96/s (n=143)
                3.17 WALL ( 3.17 usr +  0.00 sys =  3.17 CPU) @ 45.05/s (n=143)
      std_seq:  3.36 WALL ( 3.36 usr +  0.00 sys =  3.36 CPU) @ 53.58/s (n=180)
                3.37 WALL ( 3.36 usr +  0.00 sys =  3.37 CPU) @ 53.46/s (n=180)
         oseq:  3.06 WALL ( 3.06 usr +  0.00 sys =  3.06 CPU) @ 54.29/s (n=166)
                3.05 WALL ( 3.05 usr +  0.00 sys =  3.05 CPU) @ 54.37/s (n=166)

                Rate        list lazy_list  cps2   cps gen_no_optim batseq g_exn  gen coroutine std_seq oseq ulist uncons base.sequence core.sequence    g fold iter
         list 5.54+-0.02/s    --      -20%  -73%  -73%         -87%   -88%  -88% -88%      -90%    -90% -90%  -91%   -91%          -91%          -91% -94% -97% -98%
    lazy_list 6.96+-0.00/s   25%        --  -66%  -66%         -83%   -85%  -85% -85%      -87%    -87% -87%  -88%   -88%          -89%          -89% -93% -96% -98%
         cps2 20.5+- 0.0/s  269%      194%    -- [-1%]         -51%   -55%  -55% -56%      -62%    -62% -62%  -65%   -66%          -66%          -67% -78% -88% -93%
          cps 20.6+- 0.0/s  271%      196%  [1%]    --         -51%   -54%  -55% -56%      -61%    -62% -62%  -65%   -66%          -66%          -67% -78% -87% -93%
 gen_no_optim 42.0+- 0.0/s  658%      504%  105%  104%           --    -7%   -7% -11%      -21%    -22% -23%  -28%   -30%          -31%          -33% -55% -74% -86%
       batseq 45.0+- 0.0/s  712%      547%  120%  119%           7%     --   -1%  -4%      -15%    -16% -17%  -23%   -25%          -26%          -28% -52% -73% -85%
        g_exn 45.4+- 0.0/s  718%      552%  122%  120%           8%     1%    --  -4%      -15%    -15% -16%  -23%   -25%          -25%          -28% -51% -72% -85%
          gen 47.0+- 0.0/s  748%      576%  130%  128%          12%     4%    4%   --      -12%    -12% -13%  -20%   -22%          -23%          -25% -50% -71% -85%
    coroutine 53.3+- 0.2/s  860%      666%  160%  159%          27%    18%   17%  13%        --   [-1%]  -2%   -9%   -12%          -12%          -15% -43% -68% -83%
      std_seq 53.5+- 0.1/s  865%      670%  162%  160%          27%    19%   18%  14%      [1%]      --  -1%   -9%   -11%          -12%          -15% -43% -67% -83%
         oseq 54.3+- 0.0/s  880%      681%  165%  164%          29%    21%   20%  16%        2%      2%   --   -7%   -10%          -11%          -13% -42% -67% -82%
        ulist 58.7+- 0.1/s  959%      744%  187%  185%          40%    30%   29%  25%       10%     10%   8%    --    -2%           -4%           -6% -37% -64% -81%
       uncons 60.2+- 0.3/s  986%      765%  194%  192%          43%    34%   33%  28%       13%     12%  11%    3%     --         [-1%]           -4% -35% -63% -80%
base.sequence 60.8+- 0.1/s  997%      775%  197%  195%          45%    35%   34%  29%       14%     14%  12%    4%   [1%]            --           -3% -35% -63% -80%
core.sequence 62.7+- 0.0/s 1030%      801%  206%  204%          49%    39%   38%  33%       18%     17%  15%    7%     4%            3%            -- -33% -62% -80%
            g 93.2+- 0.4/s 1582%     1241%  356%  353%         122%   107%  106%  98%       75%     74%  72%   59%    55%           53%           49%   -- -43% -70%
         fold  164+-   1/s 2858%     2258%  701%  696%         290%   264%  261% 249%      208%    206% 202%  179%   172%          170%          162%  76%   -- -47%
         iter  308+-   0/s 5455%     4328% 1405% 1396%         633%   584%  579% 555%      478%    475% 467%  425%   412%          406%          392% 230%  88%   --
